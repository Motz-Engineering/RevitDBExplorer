using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RevitDBExplorer.Domain
{
    internal class WhatIsNew
    {


        public static string WhenIntroduced(string uid)
        {
            if (string.IsNullOrEmpty(uid))
            {
                return "";
            }

            if (data.TryGetValue(uid, out var result))
            {
                return result.ToString().Substring(2);
            }

            return "";
        }


        private static Dictionary<string, int> data = new Dictionary<string, int>()
{
{"Document.Export(String,String,STEPExportOptions)", 2025},
{"Document.Import(String,STEPImportOptions,View)", 2025},
{ "Document.Link(String,STEPImportOptions,View)", 2025},
{ "FileExportingEventArgs.get_BackgroundOperation()", 2025},
{ "FileExportedEventArgs.get_BackgroundOperation()", 2025},
{ "BuildingOperatingDaySchedule.Create(Document,String)", 2025},
{ "BuildingOperatingDaySchedule.GetValueForHour(Int32)", 2025},
{ "BuildingOperatingDaySchedule.SetValueForHour(Int32,Double)", 2025},
{ "BuildingOperatingDaySchedule.get_ScheduleName()", 2025},
{ "SlabShapeCrease.Dispose()", 2025},
{ "SlabShapeCrease.get_IsValidObject()", 2025},
{ "SlabShapeEditor.AddPoints(IList`1)", 2025},
{ "SlabShapeEditor.AddPoint(XYZ)", 2025},
{ "SlabShapeEditor.AddSplitLine(SlabShapeVertex,SlabShapeVertex)", 2025},
{ "Rebar.GetRebarSplice(Int32)", 2025},
{ "Rebar.GetLapLength(Int32)", 2025},
{ "Rebar.GetSpliceStaggerLength(Int32)", 2025},
{ "Rebar.RemoveSplice(Int32)", 2025},
{ "Rebar.get_HasVariableLengthBars()", 2025},
{ "Rebar.get_CanHaveVaryingLengthBars()", 2025},
{ "RebarBarType.GetLapLength(ElementId)", 2025},
{ "RebarBarType.SetLapLength(ElementId,Double)", 2025},
{ "RebarBarType.GetAutoCalculatedLapLength(ElementId)", 2025},
{ "RebarBarType.SetAutoCalculatedLapLength(ElementId,Boolean)", 2025},
{ "RebarBarType.GetStaggerLength(ElementId)", 2025},
{ "RebarBarType.SetStaggerLength(ElementId,Double)", 2025},
{ "RebarBarType.GetAutoCalculatedStaggerLength(ElementId)", 2025},
{ "RebarBarType.SetAutoCalculatedStaggerLength(ElementId,Boolean)", 2025},
{ "ViewSheet.get_SheetCollectionId()", 2025},
{ "Wall.GetWrappingLocationAsReferences(Int32)", 2025},
{ "Wall.GetWrappingLocationAsCurveParameter(Int32)", 2025},
{ "Wall.GetValidWrappingLocationIndices()", 2025},
{ "Wall.AllowWrappingAtLocation(Int32)", 2025},
{ "Wall.DisallowWrappingAtLocation(Int32)", 2025},
{ "Wall.IsWrappingAtLocationAllowed(Int32)", 2025},
{ "OptionalFunctionalityUtils.IsSTEPImportLinkAvailable()", 2025},
{ "ImportInstance.Create(Document,View,ExternalResourceReference,STEPImportOptions,LinkLoadResult&)", 2025},
{ "LinearArray.IsValidNumberOfMembers(Int32,Document)", 2025},
{ "LinearArray.GetMinimumSize(Document)", 2025},
{ "LinearArray.GetNumberOfMembersIncludingPlaceholders()", 2025},
{ "RadialArray.IsValidNumberOfMembers(Int32,Document)", 2025},
{ "RadialArray.GetMinimumSize(Document)", 2025},
{ "RadialArray.GetNumberOfMembersIncludingPlaceholders()", 2025},
{ "DistributionSysType.get_HighLegPhase()", 2025},
{ "STEPExportOptions.get_ApplicationProtocol()", 2025},
{ "STEPExportOptions.get_TargetUnit()", 2025},
{ "AnalyticalDistributionNodePropertyData.get_ConnectedPhases()", 2025},
{ "ElectricalPerPhaseData.Dispose()", 2025},
{ "ElectricalPerPhaseData.get_IsValidObject()", 2025},
{ "ElectricalPerPhaseData.get_CurrentPhaseC()", 2025},
{ "ElectricalPerPhaseData.get_CurrentPhaseB()", 2025},
{ "ElectricalPerPhaseData.get_CurrentPhaseA()", 2025},
{ "AnalyticalPowerDistributableNodeData.GetApparentPerPhaseResults()", 2025},
{ "AnalyticalPowerDistributableNodeData.GetDemandPerPhaseResults()", 2025},
{ "AnalyticalPowerDistributableNodeData.GetConnectedPhasesOnDownstream(ElementId)", 2025},
{ "AnalyticalPowerDistributableNodeData.SetConnectedPhasesOnDownstream(ElementId,ElectricalConnectedPhases)", 2025},
{ "AnalyticalPowerDistributableNodeData.GetAllAvailableConnectedPhasesOnDownstream(ElementId)", 2025},
{ "AnalyticalPowerDistributableNodeData.get_AssignedPhasesNumber()", 2025},
{ "AnalyticalPowerDistributableNodeData.get_AssignedVoltage()", 2025},
{ "AnalyticalPowerDistributableNodeData.get_DistributionSystem()", 2025},
{ "AnalyticalElement.IsValidTransform(Transform)", 2025},
{ "AnalyticalElement.SetTransform(Transform)", 2025},
{ "AnalyticalSurfaceBase.IsOuterContourValid(CurveLoop)", 2025},
{ "AnalyticalPowerSourceData.get_ApparentPowerRating()", 2025},
{ "AnalyticalTransformerData.get_ApparentPowerRating()", 2025},
{ "AnalyticalTransformerData.get_SecondaryDistributionSystem()", 2025},
{ "AnnotationMultipleAlignmentUtils.ElementSupportsMultiAlign(Element)", 2025},
{ "AnnotationMultipleAlignmentUtils.GetAnnotationOutlineWithoutLeaders(Element)", 2025},
{ "AnnotationMultipleAlignmentUtils.MoveWithAnchoredLeaders(Element,XYZ)", 2025},
{ "AnnotationMultipleAlignmentUtils.Dispose()", 2025},
{ "AnnotationMultipleAlignmentUtils.get_IsValidObject()", 2025},
{ "ArcLengthDimension.Create(Document,View,Arc,Reference,IList`1)", 2025},
{ "AreaBasedLoadData.get_PowerFactorState()", 2025},
{ "AreaBasedLoadData.get_ConnectedPhases()", 2025},
{ "BuildingOperatingYearSchedule.Create(Document,BuildingOperatingDaySchedule,String)", 2025},
{ "BuildingOperatingYearSchedule.GetScheduleForDay(DateTime)", 2025},
{ "BuildingOperatingYearSchedule.SetScheduleForDay(DateTime,BuildingOperatingDaySchedule)", 2025},
{ "BuildingOperatingYearSchedule.get_ScheduleName()", 2025},
{ "ContourSetting.IsItemEnabled(ContourSettingItem)", 2025},
{ "ContourSettingItem.get_Type()", 2025},
{ "CriticalPathIterator.IsDone()", 2025},
{ "CriticalPathIterator.MoveNext()", 2025},
{ "CriticalPathIterator.Reset()", 2025},
{ "CriticalPathIterator.GetCurrent()", 2025},
{ "CriticalPathIterator.Dispose()", 2025},
{ "CriticalPathIterator.get_Current()", 2025},
{ "CriticalPathIterator.get_IsValidObject()", 2025},
{ "CriticalPathCollector.ToNetworkSegmentIds()", 2025},
{ "CriticalPathCollector.GetCriticalPathCollectorIterator()", 2025},
{ "CriticalPathCollector.GetCalculatedFlow()", 2025},
{ "CriticalPathCollector.GetCalculatedPressureDrop()", 2025},
{ "CriticalPathCollector.GetEnumerator()", 2025},
{ "CriticalPathCollector.Dispose()", 2025},
{ "CriticalPathCollector.get_IsValidObject()", 2025},
{ "RevitLinkGraphicsSettings.IsViewRangeSupported(View)", 2025},
{ "RevitLinkGraphicsSettings.GetPhaseId()", 2025},
{ "RevitLinkGraphicsSettings.GetPhaseType()", 2025},
{ "RevitLinkGraphicsSettings.SetPhase(LinkVisibility,ElementId)", 2025},
{ "RevitLinkGraphicsSettings.GetPhaseFilterId()", 2025},
{ "RevitLinkGraphicsSettings.GetPhaseFilterType()", 2025},
{ "RevitLinkGraphicsSettings.SetPhaseFilter(LinkVisibility,ElementId)", 2025},
{ "RevitLinkGraphicsSettings.GetViewDetailLevel()", 2025},
{ "RevitLinkGraphicsSettings.GetViewDetailLevelType()", 2025},
{ "RevitLinkGraphicsSettings.SetViewDetailLevel(LinkVisibility,ViewDetailLevel)", 2025},
{ "RevitLinkGraphicsSettings.GetDiscipline()", 2025},
{ "RevitLinkGraphicsSettings.GetDisciplineType()", 2025},
{ "RevitLinkGraphicsSettings.SetDiscipline(LinkVisibility,ViewDiscipline)", 2025},
{ "RevitLinkGraphicsSettings.get_NestedLinks()", 2025},
{ "RevitLinkGraphicsSettings.get_ObjectStyles()", 2025},
{ "RevitLinkGraphicsSettings.get_ColorFill()", 2025},
{ "RevitLinkGraphicsSettings.get_ViewRange()", 2025},
{ "RevitLinkGraphicsSettings.get_ViewFilterType()", 2025},
{ "DirectShapeType.SetShape(IList`1,DirectShapeTargetViewType)", 2025},
{ "GBXMLExportOptions.GetMassIds()", 2025},
{ "GBXMLExportOptions.GetMassZoneIds()", 2025},
{ "GBXMLExportOptions.get_IsConceptual()", 2025},
{ "PDFExportOptions.GetExportInBackground()", 2025},
{ "PDFExportOptions.SetExportInBackground(Boolean)", 2025},
{ "DuctPressureDropData.get_DynamicViscosity()", 2025},
{ "AreaBasedLoadType.get_PowerFactorState()", 2025},
{ "EnergyAnalysisWindowType.get_IsSchematic()", 2025},
{ "FabricationConfiguration.CheckConnectionsForAllFabricationParts()", 2025},
{ "FabricationConfiguration.ValidateConnectionsForAllFabricationParts(Boolean)", 2025},
{ "FabricationConfiguration.PostReviewableWarningsForBadConnections(ConnectionValidationInfo)", 2025},
{ "FabricationConfiguration.GetUpdatedStraightsFromValidateConnections()", 2025},
{ "FaceToposolid.Create(Document,ElementId,ElementId,IList`1)", 2025},
{ "FaceToposolid.UpdateToFace()", 2025},
{ "FaceToposolid.GetReferencedFaces()", 2025},
{ "FaceToposolid.SetFaceReferences(IList`1)", 2025},
{ "FillPattern.ExportToPAT(IList`1,String)", 2025},
{ "IFCCategoryTemplate.Create(Document,String)", 2025},
{ "IFCCategoryTemplate.FindByName(Document,String)", 2025},
{ "IFCCategoryTemplate.GetOrCreateInSessionTemplate(Document)", 2025},
{ "IFCCategoryTemplate.GetActiveTemplate(Document)", 2025},
{ "IFCCategoryTemplate.ResetActiveTemplate(Document)", 2025},
{ "IFCCategoryTemplate.ImportFromFile(Document,String,String)", 2025},
{ "IFCCategoryTemplate.SetActiveTemplate(Document)", 2025},
{ "IFCCategoryTemplate.GetCategoryMappingTable(Document)", 2025},
{ "IFCCategoryTemplate.UpdateCategoryList(Document)", 2025},
{ "IFCCategoryTemplate.ExportToFile(Document,String)", 2025},
{ "IFCCategoryTemplate.CopyTemplate(Document,String)", 2025},
{ "IFCCategoryTemplate.ResetCategoryToDefault(ExportIFCCategoryKey)", 2025},
{ "IFCCategoryTemplate.ListNames(Document)", 2025},
{ "IFCCategoryTemplate.IsValidName(Document,String)", 2025},
{ "IFCCategoryTemplate.GetMappingInfoById(Document,ElementId,CustomSubCategoryId)", 2025},
{ "IFCCategoryTemplate.SetMappingInfo(ExportIFCCategoryKey,ExportIFCCategoryInfo)", 2025},
{ "IFCCategoryTemplate.SetMappingInfo(IDictionary`2)", 2025},
{ "IFCBuiltInCategoryKey.Dispose()", 2025},
{ "IFCBuiltInCategoryKey.get_IsValidObject()", 2025},
{ "ExportIFCCategoryKey.Dispose()", 2025},
{ "ExportIFCCategoryKey.get_IsValidObject()", 2025},
{ "ExportIFCCategoryKey.get_CustomSubCategoryId()", 2025},
{ "ExportIFCCategoryKey.get_SubCategoryName()", 2025},
{ "ExportIFCCategoryKey.get_CategoryName()", 2025},
{ "ExportIFCCategoryInfo.IsDefault()", 2025},
{ "ExportIFCCategoryInfo.Dispose()", 2025},
{ "ExportIFCCategoryInfo.get_IsValidObject()", 2025},
{ "ExportIFCCategoryInfo.get_IFCPresentationLayerName()", 2025},
{ "ExportIFCCategoryInfo.get_IFCUserDefinedType()", 2025},
{ "ExportIFCCategoryInfo.get_IFCPredefinedType()", 2025},
{ "ExportIFCCategoryInfo.get_IFCEntityName()", 2025},
{ "ExportIFCCategoryInfo.get_IFCExportFlag()", 2025},
{ "RebarSpliceGeometry.Dispose()", 2025},
{ "RebarSpliceGeometry.get_IsValidObject()", 2025},
{ "RebarSpliceGeometry.get_SpliceNormal()", 2025},
{ "RebarSpliceGeometry.get_SpliceOrigin()", 2025},
{ "RebarSpliceOptions.Dispose()", 2025},
{ "RebarSpliceOptions.get_IsValidObject()", 2025},
{ "RebarSpliceOptions.get_SpliceTypeId()", 2025},
{ "RebarSpliceOptions.get_SplicePosition()", 2025},
{ "IntersectingElementData.Dispose()", 2025},
{ "IntersectingElementData.get_IsValidObject()", 2025},
{ "IntersectingElementData.get_IntersectionVolume()", 2025},
{ "IntersectingElementData.get_IntersectedElementId()", 2025},
{ "IntersectingElementData.get_IntersectingElementId()", 2025},
{ "IntersectingElementData.get_IntersectionType()", 2025},
{ "LinearDimension.Create(Document,View,Line,IList`1)", 2025},
{ "MEPAnalyticalSegment.GetNetworkSegmentId()", 2025},
{ "AnalyticalEquipmentLoadData.get_PhasesNumber()", 2025},
{ "AnalyticalEquipmentLoadData.get_PowerFactorState()", 2025},
{ "RadialDimension.Create(Document,View,Reference,Boolean)", 2025},
{ "DuctSettings.get_AirDynamicViscosity()", 2025},
{ "RebarConstraintsManager.SetPreferredConstraint(RebarConstraint)", 2025},
{ "RebarConstraintsManager.SetPreferredConstraintsToSurfaceForHandles(IList`1)", 2025},
{ "RebarShapeDrivenAccessor.get_UseRebarConstraintsToProduceVaryingBars()", 2025},
{ "RebarSplice.GetRebarSpliceGeometry()", 2025},
{ "RebarSplice.MoveRebarSpliceGeometry(XYZ)", 2025},
{ "RebarSplice.RotateRebarSpliceGeometry(Line,Double)", 2025},
{ "RebarSplice.Dispose()", 2025},
{ "RebarSplice.get_IsValidObject()", 2025},
{ "RebarSplice.get_SplicePosition()", 2025},
{ "RebarSplice.get_SpliceTypeId()", 2025},
{ "RebarSplice.get_ConnectedRebarEnd()", 2025},
{ "RebarSplice.get_SourceRebarEnd()", 2025},
{ "RebarSplice.get_SourceRebarId()", 2025},
{ "RebarSplice.get_ConnectedRebarId()", 2025},
{ "RebarBendingDetail.AddHosts(Element,IList`1)", 2025},
{ "RebarBendingDetail.RemoveHosts(Element,IList`1)", 2025},
{ "RebarBendingDetail.GetHosts(Element)", 2025},
{ "RebarBendingDetail.SetTagRelativeRotation(Element,Double)", 2025},
{ "RebarBendingDetail.GetTagRelativeRotation(Element)", 2025},
{ "RebarBendingDetail.SetTagRelativePosition(Element,XYZ)", 2025},
{ "RebarBendingDetail.ResetTagRelativePosition(Element)", 2025},
{ "RebarBendingDetail.ResetAnnotationPositions(Element)", 2025},
{ "RebarBendingDetail.GetTagRelativePosition(Element)", 2025},
{ "RebarBendingDetail.IsRealisticBendingDetail(Element)", 2025},
{ "RebarBendingDetail.IsSchematicBendingDetail(Element)", 2025},
{ "RebarBendingDetailType.CreateSchematic(Document)", 2025},
{ "RebarBendingDetailType.CreateRealistic(Document)", 2025},
{ "RebarBendingDetailType.get_DisplayMode()", 2025},
{ "RebarBendingDetailType.get_TagTypeId()", 2025},
{ "RebarBendingDetailType.get_SchematicHeight()", 2025},
{ "RebarBendingDetailType.get_SchematicWidth()", 2025},
{ "RebarConstrainedHandle.IsEqual(RebarConstrainedHandle)", 2025},
{ "RebarConstrainedHandle.GetHandleSurface()", 2025},
{ "RebarConstrainedHandle.Move(XYZ)", 2025},
{ "RebarConstrainedHandle.CanSetBehavior(RebarHandleBehavior)", 2025},
{ "RebarConstrainedHandle.GetPossibleHandleBehaviors()", 2025},
{ "RebarConstrainedHandle.get_HandleBehavior()", 2025},
{ "RebarConstraint.GetRebarConstrainedHandle()", 2025},
{ "RebarConstraint.CreateConstraintToSurface(RebarConstrainedHandle,Surface)", 2025},
{ "RebarConstraint.GetSurfaceForConstraintToSurface()", 2025},
{ "RebarConstraint.FlipSideForClearBarSpacingZeroDistanceConstraint()", 2025},
{ "RebarConstraint.IsToSurface()", 2025},
{ "RebarConstraint.IsValidSurfaceToConstraintHandleTo(RebarConstrainedHandle,Surface)", 2025},
{ "RebarHostData.GetRebarHostDirectNeighbors(Element)", 2025},
{ "RebarSpliceRules.Create(Document)", 2025},
{ "RebarSpliceRules.SetMaximumAndMinimumBarLength(Double,Double)", 2025},
{ "RebarSpliceRules.Dispose()", 2025},
{ "RebarSpliceRules.get_IsValidObject()", 2025},
{ "RebarSpliceRules.get_RunOutPosition()", 2025},
{ "RebarSpliceRules.get_MinimumBarLength()", 2025},
{ "RebarSpliceRules.get_MaximumBarLength()", 2025},
{ "RebarSpliceTypeUtils.CreateRebarSpliceType(Document,String)", 2025},
{ "RebarSpliceTypeUtils.GetAllRebarSpliceTypes(Document)", 2025},
{ "RebarSpliceTypeUtils.GetLapLengthMultiplier(Document,ElementId)", 2025},
{ "RebarSpliceTypeUtils.SetLapLengthMultiplier(Document,ElementId,Double)", 2025},
{ "RebarSpliceTypeUtils.GetStaggerLengthMultiplier(Document,ElementId)", 2025},
{ "RebarSpliceTypeUtils.SetStaggerLengthMultiplier(Document,ElementId,Double)", 2025},
{ "RebarSpliceTypeUtils.GetShiftOption(Document,ElementId)", 2025},
{ "RebarSpliceTypeUtils.SetShiftOption(Document,ElementId,RebarSpliceShiftOption)", 2025},
{ "RebarSpliceByRulesResult.GetSpliceGeometries()", 2025},
{ "RebarSpliceByRulesResult.Dispose()", 2025},
{ "RebarSpliceByRulesResult.get_IsValidObject()", 2025},
{ "RebarSpliceByRulesResult.get_Error()", 2025},
{ "RebarSpliceUtils.SpliceRebar(Document,ElementId,RebarSpliceOptions,Line,XYZ)", 2025},
{ "RebarSpliceUtils.SpliceRebar(Document,ElementId,RebarSpliceOptions,Line,ElementId)", 2025},
{ "RebarSpliceUtils.SpliceRebar(Document,ElementId,RebarSpliceOptions,IList`1)", 2025},
{ "RebarSpliceUtils.GetSpliceGeometries(Document,ElementId,RebarSpliceOptions,RebarSpliceRules)", 2025},
{ "RebarSpliceUtils.CanRebarBeSpliced(Rebar,RebarSpliceOptions,Line,XYZ)", 2025},
{ "RebarSpliceUtils.CanRebarBeSpliced(Rebar,RebarSpliceOptions,Line,ElementId)", 2025},
{ "RebarSpliceUtils.CanRebarBeSpliced(Rebar,RebarSpliceOptions,RebarSpliceGeometry)", 2025},
{ "RebarSpliceUtils.GetSpliceChain(Rebar)", 2025},
{ "RebarSpliceUtils.GetLapDirectionForSpliceGeometryAndPosition(Rebar,RebarSpliceGeometry,RebarSplicePosition)", 2025},
{ "RebarSpliceUtils.UnifyRebarsIntoOne(Document,ElementId,ElementId)", 2025},
{ "SheetCollection.Create(Document)", 2025},
{ "SheetCollection.Create(Document,String)", 2025},
{ "SpanDirectionSymbol.Create(Document,ElementId,LinkElementId,XYZ,ElementId)", 2025},
{ "SpanDirectionSymbol.GetDefaultPlacementPoint(Document,LinkElementId)", 2025},
{ "Toposolid.ExcavateBy(ElementId)", 2025},
{ "Toposolid.RemoveExcavationBy(ElementId)", 2025},
{ "Toposolid.CanBeExcavatedBy(ElementId)", 2025},
{ "Toposolid.IsSmoothedSurfaceEnabled(Document)", 2025},
{ "Toposolid.SetSmoothedSurface(Document,Boolean)", 2025},
{ "Toposolid.GetIntersectingElementData()", 2025},
{ "ToposolidType.SetContourSettting(ContourSetting)", 2025},
{ "DirectoryNotEmptyException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "NetworkCommunicationException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "ServerInternalException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "ResourceNotFoundException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "UnauthenticatedException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "AccessDeniedException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "DefaultValueException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "SchemaException.GetObjectData(SerializationInfo,StreamingContext)", 2024},
{ "ElementId.get_Value()", 2024},
{ "Element.EvaluateAllParameterValues()", 2024},
{ "Element.EvaluateParameterValues(ISet`1)", 2024},
{ "View.RemoveLinkOverrides(ElementId)", 2024},
{ "View.GetLinkOverrides(ElementId)", 2024},
{ "View.SetLinkOverrides(ElementId,RevitLinkGraphicsSettings)", 2024},
{ "ItemFactoryBase.NewFamilyInstance(XYZ,FamilySymbol,Level,StructuralType)", 2024},
{ "Document.GetUnusedElements(ISet`1)", 2024},
{ "Document.GetAllUnusedElements(ISet`1)", 2024},
{ "Document.get_CreationGUID()", 2024},
{ "Parameter.SetMultiple(IList`1)", 2024},
{ "ParameterUtils.DownloadParameter(Document,ParameterDownloadOptions,ForgeTypeId)", 2024},
{ "ParameterUtils.DownloadParameterOptions(ForgeTypeId)", 2024},
{ "ParameterUtils.DownloadCompanyName(Document,ForgeTypeId)", 2024},
{ "View3D.ScalePerspectiveCropBox(Double)", 2024},
{ "SlabShapeVertex.Dispose()", 2024},
{ "SlabShapeVertex.get_IsValidObject()", 2024},
{ "SlabShapeEditor.DeletePoint(SlabShapeVertex)", 2024},
{ "LoadBase.RemoveHostConstraint()", 2024},
{ "LoadBase.get_IsConstrainedOnHost()", 2024},
{ "AreaLoad.Create(Document,ElementId,IList`1,IList`1,IList`1,IList`1,AreaLoadType)", 2024},
{ "AreaLoad.Create(Document,ElementId,IList`1,XYZ,AreaLoadType)", 2024},
{ "AreaLoad.AreCurveLoopsValid(IList`1)", 2024},
{ "AreaLoad.IsCurveLoopsInsideHostBoundaries(Document,ElementId,IList`1)", 2024},
{ "Connector.get_GasketLength()", 2024},
{ "GroupLoadOptions.GetDuplicateTypeNamesHandler()", 2024},
{ "GroupLoadOptions.SetDuplicateTypeNamesHandler(IDuplicateTypeNamesHandler)", 2024},
{ "GroupLoadOptions.Dispose()", 2024},
{ "GroupLoadOptions.get_IsValidObject()", 2024},
{ "GroupLoadOptions.get_ReplaceDuplicatedGroups()", 2024},
{ "GroupLoadOptions.get_IncludeGrids()", 2024},
{ "GroupLoadOptions.get_IncludeLevels()", 2024},
{ "GroupLoadOptions.get_IncludeAttachedDetails()", 2024},
{ "GroupType.LoadFrom(String,GroupLoadOptions)", 2024},
{ "RoofBase.GetSlabShapeEditor()", 2024},
{ "Floor.GetSlabShapeEditor()", 2024},
{ "IndependentTag.HasTagBehavior()", 2024},
{ "LineLoad.Create(Document,ElementId,Curve,XYZ,XYZ,LineLoadType)", 2024},
{ "LineLoad.IsCurveInsideHostBoundaries(Document,ElementId,Curve)", 2024},
{ "LineLoad.SetCurve(Curve)", 2024},
{ "PointLoad.Create(Document,ElementId,XYZ,XYZ,XYZ,PointLoadType)", 2024},
{ "PointLoad.IsPointInsideHostBoundaries(Document,ElementId,XYZ)", 2024},
{ "Mesh.ComputeSurfaceArea()", 2024},
{ "SchedulableField.GetCustomFieldData()", 2024},
{ "BIMExportOptions.Dispose()", 2024},
{ "BIMExportOptions.get_IsValidObject()", 2024},
{ "BIMExportOptions.get_ViewId()", 2024},
{ "AnalyticalMember.CanSplit()", 2024},
{ "AnalyticalMember.Split(Double)", 2024},
{ "AnalyticalToPhysicalAssociationManager.AddAssociation(ISet`1,ISet`1)", 2024},
{ "AnalyticalToPhysicalAssociationManager.GetAssociatedElementIds(ElementId)", 2024},
{ "AreaBasedLoadData.GetUpstreamNodeId()", 2024},
{ "AreaBasedLoadData.ConnectToUpstreamNode(ElementId)", 2024},
{ "AreaBasedLoadData.DisconnectFromUpstreamNode()", 2024},
{ "AreaBasedLoadData.CanDisconnectFromUpstreamNode()", 2024},
{ "AreaBasedLoadData.CanConnectToUpstreamNode(ElementId)", 2024},
{ "ViewSchedule.get_RowHeightOverride()", 2024},
{ "ViewSchedule.get_RowHeight()", 2024},
{ "ExternallyTaggedNonBRep.SetUsage(ExternallyTaggedNonBRepUsage)", 2024},
{ "ExternallyTaggedNonBReps.CanAddExternallyTaggedNonBRep(ExternallyTaggedNonBRep)", 2024},
{ "ExternallyTaggedNonBReps.Add(ExternallyTaggedNonBRep)", 2024},
{ "ExternallyTaggedNonBReps.Dispose()", 2024},
{ "ExternallyTaggedNonBReps.get_IsValidObject()", 2024},
{ "ICustomFieldProperties.AreEqualTo(ICustomFieldProperties)", 2024},
{ "BendingDetailCustomFieldProperties.AreEqualTo(ICustomFieldProperties)", 2024},
{ "BendingDetailCustomFieldProperties.Dispose()", 2024},
{ "BendingDetailCustomFieldProperties.get_IsValidObject()", 2024},
{ "BendingDetailCustomFieldProperties.get_BendDiameterDimensionsForSegmentsEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_BendDiameterDimensionsForHooksEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_BendDiameterDimensionType()", 2024},
{ "BendingDetailCustomFieldProperties.get_BendDiameterDimensionsEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_DiameterDimensionTypeId()", 2024},
{ "BendingDetailCustomFieldProperties.get_RadialDimensionTypeId()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionsMeasurementOptions()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionsOffset()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionsForHooksEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionsDisplayOption()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionTextPosition()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionsEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_AngularDimensionTypeId()", 2024},
{ "BendingDetailCustomFieldProperties.get_OrthogonalAndOverallDimesionsEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthsForArcsDisplayOption()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthsDisplayOption()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthDimensionTextPosition()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthDimensionsOffset()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthDimensionsForHooksEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthDimensionsEnabled()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentLengthDimensionTypeId()", 2024},
{ "BendingDetailCustomFieldProperties.get_MultipleValuesIndicatorOption()", 2024},
{ "BendingDetailCustomFieldProperties.get_RepresentaionOf3DShapes()", 2024},
{ "BendingDetailCustomFieldProperties.get_SegmentsRepresentation()", 2024},
{ "BendingDetailCustomFieldProperties.get_ParametersDisplayOption()", 2024},
{ "BendingDetailCustomFieldProperties.get_LineStyleId()", 2024},
{ "FilterNumericRuleEvaluator.Evaluate(Int64,Int64)", 2024},
{ "TableSectionData.GetCustomFieldId(Int32,Int32)", 2024},
{ "ContourSetting.AddSingleContour(Double,ElementId)", 2024},
{ "ContourSetting.AddContourRange(Double,Double,Double,ElementId)", 2024},
{ "ContourSetting.GetItemIndex(ContourSettingItem)", 2024},
{ "ContourSetting.RemoveItem(ContourSettingItem)", 2024},
{ "ContourSetting.DisableItem(ContourSettingItem)", 2024},
{ "ContourSetting.EnableItem(ContourSettingItem)", 2024},
{ "ContourSetting.GetContourSettingItems()", 2024},
{ "ContourSetting.Dispose()", 2024},
{ "ContourSetting.get_IsValidObject()", 2024},
{ "ContourSettingItem.Dispose()", 2024},
{ "ContourSettingItem.get_IsValidObject()", 2024},
{ "ContourSettingItem.get_SubCategoryId()", 2024},
{ "ContourSettingItem.get_Step()", 2024},
{ "ContourSettingItem.get_Stop()", 2024},
{ "ContourSettingItem.get_Start()", 2024},
{ "CustomFieldData.GetCustomFieldId()", 2024},
{ "CustomFieldData.GetCustomFieldProperties()", 2024},
{ "CustomFieldData.SetCustomFieldProperties(ICustomFieldProperties)", 2024},
{ "CustomFieldData.ValidateCustomFieldProperties(ICustomFieldProperties)", 2024},
{ "CustomFieldData.Dispose()", 2024},
{ "CustomFieldData.get_IsValidObject()", 2024},
{ "CustomFieldData.get_DefaultRowHeightOnSheet()", 2024},
{ "CustomFieldData.get_FieldName()", 2024},
{ "CustomFieldData.get_FieldTooltip()", 2024},
{ "RevitLinkGraphicsSettings.Dispose()", 2024},
{ "RevitLinkGraphicsSettings.get_IsValidObject()", 2024},
{ "RevitLinkGraphicsSettings.get_LinkVisibilityType()", 2024},
{ "RevitLinkGraphicsSettings.get_LinkedViewId()", 2024},
{ "DetailElementOrderUtils.GetDrawOrderForDetails(View,ISet`1)", 2024},
{ "DirectShape.HasExternallyTaggedReference(ExternalGeometryId)", 2024},
{ "DirectShape.GetExternallyTaggedReference(ExternalGeometryId)", 2024},
{ "DirectShape.RemoveReferenceObject(ExternalGeometryId)", 2024},
{ "DirectShape.RemoveReferenceObject(String)", 2024},
{ "DirectShape.RemoveAllReferenceObjects()", 2024},
{ "DirectShape.AreValidDirectShapeReferenceOptions(DirectShapeReferenceOptions)", 2024},
{ "DirectShape.IsValidShape(ExternallyTaggedGeometryObject)", 2024},
{ "DirectShape.IsValidUsage(ExternallyTaggedGeometryObject)", 2024},
{ "DirectShapeReferenceOptions.IsValidExternalGeometryId(ExternalGeometryId)", 2024},
{ "DirectShapeReferenceOptions.SetExternalGeometryId(ExternalGeometryId)", 2024},
{ "DirectShapeReferenceOptions.GetExternalGeometryId()", 2024},
{ "DirectShapeType.IsValidShape(ExternallyTaggedGeometryObject)", 2024},
{ "DirectShapeType.HasExternallyTaggedReference(ExternalGeometryId)", 2024},
{ "DirectShapeType.GetExternallyTaggedReference(ExternalGeometryId)", 2024},
{ "DirectShapeType.RemoveReferenceObject(ExternalGeometryId)", 2024},
{ "DirectShapeType.RemoveReferenceObject(String)", 2024},
{ "DirectShapeType.RemoveAllReferenceObjects()", 2024},
{ "DirectShapeType.AreValidDirectShapeReferenceOptions(DirectShapeReferenceOptions)", 2024},
{ "DirectShapeType.IsValidUsage(ExternallyTaggedGeometryObject)", 2024},
{ "ElectricalAnalyticalLoadSet.Create(Document,String)", 2024},
{ "ElectricalAnalyticalLoadSet.GetLoadIds()", 2024},
{ "ElectricalAnalyticalLoadSet.get_TotalQuantity()", 2024},
{ "ElectricalAnalyticalLoadSet.get_QuantityOnStandBy()", 2024},
{ "ElectricalLoadClassification.get_Other()", 2024},
{ "EvaluatedParameter.AsValueString(Document,FormatOptions)", 2024},
{ "EvaluatedParameter.AsValueString(Document)", 2024},
{ "EvaluatedParameter.Dispose()", 2024},
{ "EvaluatedParameter.get_IsValidObject()", 2024},
{ "EvaluatedParameter.get_StorageType()", 2024},
{ "EvaluatedParameter.get_HasValue()", 2024},
{ "EvaluatedParameter.get_Value()", 2024},
{ "EvaluatedParameter.get_Definition()", 2024},
{ "EnergyAnalysisConstruction.GetMaterialIds()", 2024},
{ "EnergyAnalysisConstruction.get_Roughness()", 2024},
{ "EnergyAnalysisConstruction.get_Absorptance()", 2024},
{ "EnergyAnalysisConstruction.get_ThermalMass()", 2024},
{ "EnergyAnalysisConstruction.get_ThermalResistance()", 2024},
{ "EnergyAnalysisConstruction.get_HeatTransferCoefficient()", 2024},
{ "EnergyAnalysisConstruction.get_Description()", 2024},
{ "EnergyAnalysisConstruction.get_ConstructionName()", 2024},
{ "EnergyAnalysisConstruction.get_IsSchematic()", 2024},
{ "EnergyAnalysisMaterial.get_ThermalResistance()", 2024},
{ "EnergyAnalysisMaterial.get_SpecificHeatCapacity()", 2024},
{ "EnergyAnalysisMaterial.get_Density()", 2024},
{ "EnergyAnalysisMaterial.get_ThermalConductivity()", 2024},
{ "EnergyAnalysisMaterial.get_Thickness()", 2024},
{ "EnergyAnalysisMaterial.get_Description()", 2024},
{ "EnergyAnalysisMaterial.get_MaterialName()", 2024},
{ "EnergyAnalysisOpening.GetConstruction()", 2024},
{ "EnergyAnalysisOpening.GetWindowType()", 2024},
{ "EnergyAnalysisOpening.get_OriginatingElementName()", 2024},
{ "EnergyAnalysisOpening.get_OriginatingElementId()", 2024},
{ "EnergyAnalysisSpace.get_Number()", 2024},
{ "EnergyAnalysisSurface.GetConstruction()", 2024},
{ "EnergyAnalysisSurface.get_OriginatingElementName()", 2024},
{ "EnergyAnalysisSurface.get_OriginatingElementId()", 2024},
{ "EnergyAnalysisWindowType.GetSolarHeatGainCoefficientsForSolarIndicientAngles()", 2024},
{ "EnergyAnalysisWindowType.get_Transmittance()", 2024},
{ "EnergyAnalysisWindowType.get_SolarHeatGainCoefficient()", 2024},
{ "EnergyAnalysisWindowType.get_HeatTransferCoefficient()", 2024},
{ "EnergyAnalysisWindowType.get_Description()", 2024},
{ "EnergyAnalysisWindowType.get_WindowTypeName()", 2024},
{ "EnergyDataSettings.get_UseCurrentViewOnly()", 2024},
{ "ExternalServiceOptions.get_SupportActivation()", 2024},
{ "ExternalService.get_SupportActivation()", 2024},
{ "ExternallyTaggedGeometryValidation.LacksSubnodes(GeometryObject)", 2024},
{ "FabricationConfiguration.SetServicesToLoad(IList`1)", 2024},
{ "FabricationConfiguration.GetServiceByGUID(Guid)", 2024},
{ "FabricationConfiguration.GetServiceGUID(Int32)", 2024},
{ "FabricationConfiguration.GetSpecificationByGUID(Guid)", 2024},
{ "FabricationConfiguration.GetSpecificationGUID(Int32)", 2024},
{ "FabricationConfiguration.GetMaterialByGUID(Guid)", 2024},
{ "FabricationConfiguration.GetMaterialGUID(Int32)", 2024},
{ "FabricationConfiguration.GetMaterialGaugeByGUID(Guid,Int32)", 2024},
{ "FabricationConfiguration.GetMaterialGaugeGUID(Int32,Int32)", 2024},
{ "FabricationPart.get_MaterialGauge()", 2024},
{ "FabricationServiceSettings.GetFabricationServiceSettings(Document)", 2024},
{ "FabricationServiceSettings.SetFluidTypeAndTemperature(FabricationService,ElementId,Double)", 2024},
{ "FabricationServiceSettings.RemoveFluidSetting(FabricationService)", 2024},
{ "FabricationServiceSettings.GetFluidTemperature(FabricationService)", 2024},
{ "FabricationServiceSettings.GetFluidType(FabricationService)", 2024},
{ "FabricationServiceSettings.HasValidFluidSetting(FabricationService)", 2024},
{ "FilledRegion.CreateMaskingRegion(Document,SketchPlane,IList`1)", 2024},
{ "FilledRegion.CreateMaskingRegion(Document,ElementId,IList`1)", 2024},
{ "FilledRegionType.IsValidForegroundPatternId(ElementId)", 2024},
{ "FilledRegionType.IsValidBackgroundPatternId(ElementId)", 2024},
{ "FilledRegionType.IsValidSolidFillPatternId(ElementId)", 2024},
{ "FilledRegionType.IsValidFillPatternId(ElementId)", 2024},
{ "FilledRegionType.IsValidMasking(Boolean)", 2024},
{ "ScheduleField.GetCustomFieldData()", 2024},
{ "ScheduleField.get_VerticalAlignment()", 2024},
{ "ParameterDownloadOptions.GetCategories()", 2024},
{ "ParameterDownloadOptions.SetCategories(ISet`1)", 2024},
{ "ParameterDownloadOptions.GetGroupTypeId()", 2024},
{ "ParameterDownloadOptions.SetGroupTypeId(ForgeTypeId)", 2024},
{ "ParameterDownloadOptions.Dispose()", 2024},
{ "ParameterDownloadOptions.get_IsValidObject()", 2024},
{ "ParameterDownloadOptions.get_Visible()", 2024},
{ "ParameterDownloadOptions.get_IsInstance()", 2024},
{ "RebarUpdateCurvesData.GetCycleCounter()", 2024},
{ "RebarUpdateCurvesData.SetCycleCounter(Int32)", 2024},
{ "RebarUpdateCurvesData.get_AlignedFreeFormSetOrientationOptions()", 2024},
{ "RebarUpdateCurvesData.get_AreOrientationOptionsChanged()", 2024},
{ "RebarUpdateCurvesData.get_CycleCounterChanged()", 2024},
{ "ImportIFCOptions.GetImportIFCOptions()", 2024},
{ "ImportIFCOptions.Dispose()", 2024},
{ "ImportIFCOptions.get_IsValidObject()", 2024},
{ "ImportIFCOptions.get_LinkProcessor()", 2024},
{ "ElectricalAnalyticalNode.GetAllDownstreamLoadIds()", 2024},
{ "MEPAnalyticalModelData.GetSegmentById(Int32)", 2024},
{ "MEPAnalyticalModelData.GetSegmentByIndex(Int32)", 2024},
{ "MEPAnalyticalModelData.IsValidSegmentId(Int32)", 2024},
{ "MEPAnalyticalModelData.GetSegmentData(Int32)", 2024},
{ "MEPAnalyticalModelData.GetNumberOfNodes()", 2024},
{ "MEPAnalyticalModelData.GetNumberOfSegments()", 2024},
{ "MEPAnalyticalModelData.GetNodeById(Int32)", 2024},
{ "MEPAnalyticalModelData.IsValidNodeId(Int32)", 2024},
{ "MEPAnalyticalModelData.GetNodeByIndex(Int32)", 2024},
{ "MEPAnalyticalModelData.GetMEPAnalyticalModelData(Element)", 2024},
{ "MEPAnalyticalModelData.Dispose()", 2024},
{ "MEPAnalyticalModelData.get_IsValidObject()", 2024},
{ "MEPAnalyticalNode.IsSameNode(MEPAnalyticalNode)", 2024},
{ "MEPAnalyticalNode.Dispose()", 2024},
{ "MEPAnalyticalNode.get_IsValidObject()", 2024},
{ "MEPAnalyticalNode.get_Location()", 2024},
{ "MEPAnalyticalNode.get_IsFlowBlocked()", 2024},
{ "MEPAnalyticalNode.get_IsFocalNode()", 2024},
{ "MEPAnalyticalNode.get_Id()", 2024},
{ "MEPAnalyticalSegment.Dispose()", 2024},
{ "MEPAnalyticalSegment.get_IsValidObject()", 2024},
{ "MEPAnalyticalSegment.get_Area()", 2024},
{ "MEPAnalyticalSegment.get_DemandFlow()", 2024},
{ "MEPAnalyticalSegment.get_RevitElementId()", 2024},
{ "MEPAnalyticalSegment.get_EndNode()", 2024},
{ "MEPAnalyticalSegment.get_StartNode()", 2024},
{ "MEPAnalyticalSegment.get_Id()", 2024},
{ "MEPAnalyticalSegment.get_Roughness()", 2024},
{ "MEPAnalyticalSegment.get_InnerDiameter()", 2024},
{ "MEPAnalyticalSegment.get_SegmentType()", 2024},
{ "MEPAnalyticalSegment.get_DomainType()", 2024},
{ "MEPNetworkSegmentData.IsValid()", 2024},
{ "MEPNetworkSegmentData.GetUpstreamSegments()", 2024},
{ "MEPNetworkSegmentData.GetDownstreamSegments()", 2024},
{ "MEPNetworkSegmentData.Dispose()", 2024},
{ "MEPNetworkSegmentData.get_IsValidObject()", 2024},
{ "MEPNetworkSegmentData.get_Coefficient()", 2024},
{ "MEPNetworkSegmentData.get_PressureDrop()", 2024},
{ "MEPNetworkSegmentData.get_VelocityPressure()", 2024},
{ "MEPNetworkSegmentData.get_Velocity()", 2024},
{ "MEPNetworkSegmentData.get_FrictionFactor()", 2024},
{ "MEPNetworkSegmentData.get_RelativeRoughness()", 2024},
{ "MEPNetworkSegmentData.get_ReynoldsNumber()", 2024},
{ "MEPNetworkSegmentData.get_FlowState()", 2024},
{ "MEPNetworkSegmentData.get_Flow()", 2024},
{ "MEPNetworkSegmentData.get_SectionNumber()", 2024},
{ "MEPNetworkSegmentData.get_IsCriticalPath()", 2024},
{ "MEPNetworkIterator.Start()", 2024},
{ "MEPNetworkIterator.End()", 2024},
{ "MEPNetworkIterator.Next()", 2024},
{ "MEPNetworkIterator.GetAnalyticalSegment()", 2024},
{ "MEPNetworkIterator.GetAnalyticalNode()", 2024},
{ "MEPNetworkIterator.GetOtherAnalyticalNode()", 2024},
{ "MEPNetworkIterator.GetAnalyticalModelData()", 2024},
{ "MEPNetworkIterator.Dispose()", 2024},
{ "MEPNetworkIterator.get_IsValidObject()", 2024},
{ "MEPNetworkIterator.get_CurrentElementId()", 2024},
{ "MEPNetworkIterator.get_SystemClassification()", 2024},
{ "MEPNetworkIterator.get_SystemId()", 2024},
{ "MEPSupportUtils.CreateDuctworkStiffener(Document,ElementId,ElementId,Double)", 2024},
{ "MEPNetworkSegmentId.IsValid()", 2024},
{ "MEPNetworkSegmentId.Dispose()", 2024},
{ "MEPNetworkSegmentId.get_IsValidObject()", 2024},
{ "MEPNetworkSegmentId.get_SegmentId()", 2024},
{ "MEPNetworkSegmentId.get_ElementId()", 2024},
{ "AnalyticalEquipmentLoadData.get_LoadSet()", 2024},
{ "DuctSettings.IsNetworkBasedCalculationsEnabled(Document)", 2024},
{ "DuctSettings.get_NetworkBasedCalculations()", 2024},
{ "RebarFreeFormAccessor.HasValidAlignedServer()", 2024},
{ "RebarFreeFormAccessor.get_AlignedFreeFormSetOrientationOptions()", 2024},
{ "RebarFreeFormAccessor.get_CycleCounter()", 2024},
{ "RebarBendingDetail.Create(Document,ElementId,ElementId,Int32,RebarBendingDetailType,XYZ,Double)", 2024},
{ "RebarBendingDetail.SetHost(Element,Reference)", 2024},
{ "RebarBendingDetail.GetHost(Element)", 2024},
{ "RebarBendingDetail.GetPosition(Element)", 2024},
{ "RebarBendingDetail.GetRotation(Element)", 2024},
{ "RebarBendingDetail.SetPosition(Element,XYZ)", 2024},
{ "RebarBendingDetail.SetRotation(Element,Double)", 2024},
{ "RebarBendingDetail.IsBendingDetail(Element)", 2024},
{ "RebarBendingDetailType.Create(Document)", 2024},
{ "RebarBendingDetailType.get_BendDiameterDimensionsForHooksEnabled()", 2024},
{ "RebarBendingDetailType.get_BendDiameterDimensionsForSegmentsEnabled()", 2024},
{ "RebarBendingDetailType.get_BendDiameterDimensionType()", 2024},
{ "RebarBendingDetailType.get_DiameterDimensionTypeId()", 2024},
{ "RebarBendingDetailType.get_RadialDimensionTypeId()", 2024},
{ "RebarBendingDetailType.get_BendDiameterDimensionsEnabled()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionsMeasurementOptions()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionTextPosition()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionsForHooksEnabled()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionsOffset()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionsDisplayOption()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionTypeId()", 2024},
{ "RebarBendingDetailType.get_AngularDimensionsEnabled()", 2024},
{ "RebarBendingDetailType.get_OrthogonalAndOverallDimesionsEnabled()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthDimensionsForHooksEnabled()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthDimensionsOffset()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthDimensionTextPosition()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthsForArcsDisplayOption()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthsDisplayOption()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthDimensionTypeId()", 2024},
{ "RebarBendingDetailType.get_SegmentLengthDimensionsEnabled()", 2024},
{ "RebarBendingDetailType.get_DetailLevel()", 2024},
{ "RebarBendingDetailType.get_MultipleValuesIndicatorOption()", 2024},
{ "RebarBendingDetailType.get_RepresentaionOf3DShapes()", 2024},
{ "RebarBendingDetailType.get_SegmentsRepresentation()", 2024},
{ "RebarConstraint.GetPositiveOffsetDirectionForToOtherRebarConstraint()", 2024},
{ "SSEPointVisibilitySettings.GetVisibility(Document,ElementId)", 2024},
{ "SSEPointVisibilitySettings.SetVisibility(Document,ElementId,Boolean)", 2024},
{ "StructuralSettings.GetLoadForceVectorReprLine(LoadType,XYZ)", 2024},
{ "StructuralSettings.SetValuesForLoadsDisplayScaling(Double,Double,Double,Double)", 2024},
{ "StructuralSettings.get_UseLoadsDisplayScaling()", 2024},
{ "Toposolid.Create(Document,IList`1,IList`1,ElementId,ElementId)", 2024},
{ "Toposolid.Create(Document,IList`1,ElementId,ElementId)", 2024},
{ "Toposolid.CreateFromTopographySurface(Document,ElementId,ElementId,ElementId)", 2024},
{ "Toposolid.GetSlabShapeEditor()", 2024},
{ "Toposolid.CreateSubDivision(Document,IList`1)", 2024},
{ "Toposolid.GetSubDivisionIds()", 2024},
{ "Toposolid.Split(IList`1)", 2024},
{ "Toposolid.Simplify(Double)", 2024},
{ "Toposolid.get_SketchId()", 2024},
{ "Toposolid.get_HostTopoId()", 2024},
{ "ToposolidType.GetContourSetting()", 2024},
{ "ElementId.Parse(String)", 2023},
{ "ElementId.TryParse(String,ElementId&)", 2023},
{ "Element.GetExternalResourceReferencesExpanded()", 2023},
{ "Element.GetExternalResourceReferenceExpanded(ExternalResourceType)", 2023},
{ "Element.get_IsModifiable()", 2023},
{ "View.HasViewTransforms()", 2023},
{ "View.GetModelToProjectionTransforms()", 2023},
{ "View.GetPlacementOnSheetStatus()", 2023},
{ "Document.GetChangedElements(Guid)", 2023},
{ "Document.Link(String,STLImportOptions,View)", 2023},
{ "Document.Link(String,OBJImportOptions,View)", 2023},
{ "Document.IsValidVersionGUID(Document,Guid)", 2023},
{ "Document.Export(String,String,OBJExportOptions)", 2023},
{ "Document.Import(String,AXMImportOptions,View)", 2023},
{ "Document.Import(String,STLImportOptions,View)", 2023},
{ "Document.Import(String,OBJImportOptions,View)", 2023},
{ "CurveElement.CreateAreaBasedLoadBoundaryLine(Document,Curve,ElementId)", 2023},
{ "CurveElement.CreateAreaBasedLoadBoundaryLines(Document,IList`1,ElementId)", 2023},
{ "CurveElement.GetAreaBasedLoadBoundaryLineData()", 2023},
{ "BaseImportOptions.GetDefaultLengthUnit()", 2023},
{ "BaseImportOptions.SetDefaultLengthUnit(ForgeTypeId)", 2023},
{ "AXMImportOptions.get_ImportLevels()", 2023},
{ "SpatialElement.GetSpatialElementDomainData()", 2023},
{ "SpatialElement.get_SpatialElementType()", 2023},
{ "ExternalDataInstanceAddingIntoDocumentEventArgs.get_TypeId()", 2023},
{ "ExternalDataInstanceAddedIntoDocumentEventArgs.get_NewInstanceId()", 2023},
{ "ExternalDataInstanceAddedIntoDocumentEventArgs.get_ItemId()", 2023},
{ "ExternalDataInstanceAddedIntoDocumentEventArgs.get_ProjectId()", 2023},
{ "ExternalDataInstanceAddedIntoDocumentEventArgs.get_TypeId()", 2023},
{ "ExternalDataInstanceRemovingFromDocumentEventArgs.get_InstanceId()", 2023},
{ "ExternalDataInstanceRemovingFromDocumentEventArgs.get_TypeId()", 2023},
{ "ExternalDataInstanceRemovedFromDocumentEventArgs.get_TypeId()", 2023},
{ "LinkedResourceOpenedEventArgs.get_ResourceTypeId()", 2023},
{ "Application.get_ShowGraphicalOpenEndsAreaBasedLoadBoundaryDisconnects()", 2023},
{ "Category.get_BuiltInCategory()", 2023},
{ "Category.get_IsValid()", 2023},
{ "ParameterUtils.IsBuiltInParameter(ElementId)", 2023},
{ "Zone.CreateAreaBasedLoad(Document,String,ElementId,ElementId)", 2023},
{ "Zone.GetDomainData()", 2023},
{ "SlabShapeEditor.CreateCreasesFromFoldingLines(Element,IList`1)", 2023},
{ "SlabShapeEditor.Dispose()", 2023},
{ "SlabShapeEditor.get_IsValidObject()", 2023},
{ "BoundingBoxXYZ.get_IsSet()", 2023},
{ "IViewSheetSet.get_IsAutomatic()", 2023},
{ "IViewSheetSet.get_ViewOrganizationId()", 2023},
{ "IViewSheetSet.get_SheetOrganizationId()", 2023},
{ "IViewSheetSet.get_OrderedViewList()", 2023},
{ "InSessionViewSheetSet.get_IsAutomatic()", 2023},
{ "InSessionViewSheetSet.get_ViewOrganizationId()", 2023},
{ "InSessionViewSheetSet.get_SheetOrganizationId()", 2023},
{ "InSessionViewSheetSet.get_OrderedViewList()", 2023},
{ "ViewSheetSet.get_IsAutomatic()", 2023},
{ "ViewSheetSet.get_ViewOrganizationId()", 2023},
{ "ViewSheetSet.get_SheetOrganizationId()", 2023},
{ "ViewSheetSet.get_OrderedViewList()", 2023},
{ "AreaLoad.Create(Document,ElementId,XYZ,AreaLoadType)", 2023},
{ "AreaLoad.IsValidHostId(Document,ElementId)", 2023},
{ "ViewSheet.GetAllRevisionCloudIds()", 2023},
{ "ViewSheet.Duplicate(SheetDuplicateOption)", 2023},
{ "ViewSheet.CanBeDuplicated(SheetDuplicateOption)", 2023},
{ "IndependentTag.IsLeaderVisible(Reference)", 2023},
{ "IndependentTag.SetIsLeaderVisible(Reference,Boolean)", 2023},
{ "IndependentTag.get_MergeElbows()", 2023},
{ "IndependentTag.get_LeadersPresentationMode()", 2023},
{ "LineLoad.Create(Document,ElementId,Int32,XYZ,XYZ,LineLoadType)", 2023},
{ "LineLoad.Create(Document,ElementId,XYZ,XYZ,LineLoadType)", 2023},
{ "LineLoad.IsValidHostId(Document,ElementId)", 2023},
{ "PointLoad.Create(Document,ElementId,AnalyticalElementSelector,XYZ,XYZ,PointLoadType)", 2023},
{ "PointLoad.IsValidHostId(Document,ElementId)", 2023},
{ "BrowserOrganization.get_Type()", 2023},
{ "Viewport.IsViewIdValidForViewport(ElementId)", 2023},
{ "Viewport.HasViewportTransforms()", 2023},
{ "Viewport.GetProjectionToSheetTransform()", 2023},
{ "Viewport.get_ViewportPositioning()", 2023},
{ "GeometryInstance.GetSymbolGeometryId()", 2023},
{ "GeometryInstance.GetDocument()", 2023},
{ "SymbolGeometryId.AsUniqueIdentifier()", 2023},
{ "SymbolGeometryId.Dispose()", 2023},
{ "SymbolGeometryId.get_IsValidObject()", 2023},
{ "SymbolGeometryId.get_SymbolId()", 2023},
{ "TriangulatedShellComponent.GetVertices()", 2023},
{ "OptionalFunctionalityUtils.IsOBJImportLinkAvailable()", 2023},
{ "OptionalFunctionalityUtils.IsSTLImportLinkAvailable()", 2023},
{ "OptionalFunctionalityUtils.IsAXMImportLinkAvailable()", 2023},
{ "ImportInstance.Create(Document,View,ExternalResourceReference,STLImportOptions,LinkLoadResult&)", 2023},
{ "ImportInstance.Create(Document,View,ExternalResourceReference,OBJImportOptions,LinkLoadResult&)", 2023},
{ "ConnectorElement.ChangeHostReference(Reference,Edge)", 2023},
{ "ConnectorElement.ChangeHostReference(Reference)", 2023},
{ "AnalyticalDistributionNodePropertyData.Dispose()", 2023},
{ "AnalyticalDistributionNodePropertyData.get_IsValidObject()", 2023},
{ "AnalyticalDistributionNodePropertyData.get_NumberOfPhases()", 2023},
{ "AnalyticalBusData.get_TotalConnectedCurrent()", 2023},
{ "AnalyticalBusData.get_CurrentRating()", 2023},
{ "AnalyticalBusData.get_Voltage()", 2023},
{ "AnalyticalElement.GetTransform()", 2023},
{ "AnalyticalElement.IsValidSelector(AnalyticalModelSelector)", 2023},
{ "AnalyticalElement.GetReference(AnalyticalModelSelector)", 2023},
{ "AnalyticalElement.GetCurve()", 2023},
{ "AnalyticalElement.IsSingleCurve()", 2023},
{ "AnalyticalElement.IsValidAnalyzeAs(AnalyzeAs)", 2023},
{ "AnalyticalElement.IsValidStructuralRole(AnalyticalStructuralRole)", 2023},
{ "AnalyticalElement.get_StructuralRole()", 2023},
{ "AnalyticalElement.get_AnalyzeAs()", 2023},
{ "AnalyticalElement.get_MaterialId()", 2023},
{ "AnalyticalMember.Create(Document,Curve)", 2023},
{ "AnalyticalMember.SetCurve(Curve)", 2023},
{ "AnalyticalMember.IsValidSectionTypeId(ElementId)", 2023},
{ "AnalyticalMember.IsValidCurve(Curve)", 2023},
{ "AnalyticalMember.GetReleaseType(Boolean)", 2023},
{ "AnalyticalMember.SetReleaseType(Boolean,ReleaseType)", 2023},
{ "AnalyticalMember.GetReleaseConditions()", 2023},
{ "AnalyticalMember.SetReleaseConditions(ReleaseConditions)", 2023},
{ "AnalyticalMember.GetMemberForces()", 2023},
{ "AnalyticalMember.SetMemberForces(MemberForces)", 2023},
{ "AnalyticalMember.SetMemberForces(Boolean,XYZ,XYZ)", 2023},
{ "AnalyticalMember.FlipCurve()", 2023},
{ "AnalyticalMember.get_StructuralSectionShape()", 2023},
{ "AnalyticalMember.get_SectionTypeId()", 2023},
{ "AnalyticalMember.get_CrossSectionRotation()", 2023},
{ "ReleaseConditions.Dispose()", 2023},
{ "ReleaseConditions.get_IsValidObject()", 2023},
{ "ReleaseConditions.get_Mz()", 2023},
{ "ReleaseConditions.get_My()", 2023},
{ "ReleaseConditions.get_Mx()", 2023},
{ "ReleaseConditions.get_Fz()", 2023},
{ "ReleaseConditions.get_Fy()", 2023},
{ "ReleaseConditions.get_Fx()", 2023},
{ "ReleaseConditions.get_Start()", 2023},
{ "AnalyticalNodeData.GetConnectionStatus()", 2023},
{ "AnalyticalNodeData.GetAnalyticalNodeData(Element)", 2023},
{ "AnalyticalNodeData.Dispose()", 2023},
{ "AnalyticalNodeData.get_IsValidObject()", 2023},
{ "AnalyticalSurfaceBase.GetOuterContour()", 2023},
{ "AnalyticalSurfaceBase.SetOuterContour(CurveLoop)", 2023},
{ "AnalyticalSurfaceBase.IsCurveLoopValid(CurveLoop)", 2023},
{ "AnalyticalSurfaceBase.get_SketchId()", 2023},
{ "AnalyticalOpening.Create(Document,CurveLoop,ElementId)", 2023},
{ "AnalyticalOpening.IsCurveLoopValidForAnalyticalOpening(CurveLoop,Document,ElementId)", 2023},
{ "AnalyticalOpening.get_PanelId()", 2023},
{ "AnalyticalPanel.Create(Document,Curve,XYZ)", 2023},
{ "AnalyticalPanel.Create(Document,CurveLoop)", 2023},
{ "AnalyticalPanel.GetAnalyticalOpeningsIds()", 2023},
{ "AnalyticalPanel.get_Thickness()", 2023},
{ "AnalyticalPowerSourceData.get_TotalConnectedCurrent()", 2023},
{ "AnalyticalPowerSourceData.get_Voltage()", 2023},
{ "AnalyticalToPhysicalAssociationManager.GetAnalyticalToPhysicalAssociationManager(Document)", 2023},
{ "AnalyticalToPhysicalAssociationManager.HasAssociation(ElementId)", 2023},
{ "AnalyticalToPhysicalAssociationManager.IsAnalyticalElement(Document,ElementId)", 2023},
{ "AnalyticalToPhysicalAssociationManager.IsPhysicalElement(Document,ElementId)", 2023},
{ "AnalyticalToPhysicalAssociationManager.AddAssociation(ElementId,ElementId)", 2023},
{ "AnalyticalToPhysicalAssociationManager.RemoveAssociation(ElementId)", 2023},
{ "AnalyticalToPhysicalAssociationManager.GetAssociatedElementId(ElementId)", 2023},
{ "AnalyticalTransferSwitchData.get_TotalConnectedCurrent()", 2023},
{ "AnalyticalTransferSwitchData.get_CurrentRating()", 2023},
{ "AnalyticalTransferSwitchData.get_Voltage()", 2023},
{ "AreaBasedLoadBoundaryLineData.IsLevelWithinRange(ElementId)", 2023},
{ "AreaBasedLoadBoundaryLineData.IsElevationWithinRange(Double)", 2023},
{ "AreaBasedLoadBoundaryLineData.GetLevelIdsInRange()", 2023},
{ "AreaBasedLoadBoundaryLineData.Dispose()", 2023},
{ "AreaBasedLoadBoundaryLineData.get_IsValidObject()", 2023},
{ "AreaBasedLoadBoundaryLineData.get_TopLevelId()", 2023},
{ "AreaBasedLoadBoundaryLineData.get_BottomLevelId()", 2023},
{ "ZoneElementDomainData.Dispose()", 2023},
{ "ZoneElementDomainData.get_IsValidObject()", 2023},
{ "AreaBasedLoadData.AddElectricalLoadArea(ElementId)", 2023},
{ "AreaBasedLoadData.RemoveElectricalLoadArea(ElementId)", 2023},
{ "AreaBasedLoadData.GetElectricalLoadAreas()", 2023},
{ "AreaBasedLoadData.get_Current()", 2023},
{ "AreaBasedLoadData.get_Voltage()", 2023},
{ "AreaBasedLoadData.get_ApparentPowerDensity()", 2023},
{ "AreaBasedLoadData.get_LoadType()", 2023},
{ "AreaBasedLoadData.get_ApparentLoad()", 2023},
{ "AreaBasedLoadData.get_PowerFactor()", 2023},
{ "AreaBasedLoadData.get_TrueLoad()", 2023},
{ "AreaBasedLoadData.get_LoadClassification()", 2023},
{ "AreaBasedLoadData.get_LoadDensity()", 2023},
{ "AreaBasedLoadData.get_AreaBasedLoadType()", 2023},
{ "AreaBasedLoadData.get_PhasesNumber()", 2023},
{ "ScheduleHeightsOnSheet.GetBodyRowHeights()", 2023},
{ "ScheduleHeightsOnSheet.Dispose()", 2023},
{ "ScheduleHeightsOnSheet.get_IsValidObject()", 2023},
{ "ScheduleHeightsOnSheet.get_ColumnHeaderHeight()", 2023},
{ "ScheduleHeightsOnSheet.get_TitleHeight()", 2023},
{ "ViewSchedule.IsSplit()", 2023},
{ "ViewSchedule.Split(IList`1)", 2023},
{ "ViewSchedule.Split(Int32)", 2023},
{ "ViewSchedule.SplitSegment(Int32,IList`1)", 2023},
{ "ViewSchedule.DeleteSegment(Int32)", 2023},
{ "ViewSchedule.GetSegmentCount()", 2023},
{ "ViewSchedule.SetSegmentHeight(Int32,Double)", 2023},
{ "ViewSchedule.GetSegmentHeight(Int32)", 2023},
{ "ViewSchedule.GetScheduleInstances(Int32)", 2023},
{ "ViewSchedule.MergeSegments(Int32,Int32)", 2023},
{ "ViewSchedule.GetScheduleHeightsOnSheet()", 2023},
{ "BoundaryValidation.IsValidBoundaryOnView(Document,ElementId,IList`1)", 2023},
{ "BoundaryValidation.IsValidBoundaryOnSketchPlane(SketchPlane,IList`1)", 2023},
{ "TransformWithBoundary.GetModelToProjectionTransform()", 2023},
{ "TransformWithBoundary.GetBoundary()", 2023},
{ "ScheduleDefinition.IsValidCategoryForFilterBySheet()", 2023},
{ "ScheduleDefinition.get_IsFilteredBySheet()", 2023},
{ "ViewSystemsAnalysisReport.CancelSystemsAnalysis(Document,ElementId)", 2023},
{ "DirectShapeType.get_UserAssignability()", 2023},
{ "DocumentDifference.GetCreatedElementIds()", 2023},
{ "DocumentDifference.GetModifiedElementIds()", 2023},
{ "DocumentDifference.GetDeletedElementIds()", 2023},
{ "DocumentDifference.Dispose()", 2023},
{ "DocumentDifference.get_IsValidObject()", 2023},
{ "DocumentDifference.get_AreDeletedElementIdsAvailable()", 2023},
{ "OBJExportOptions.IsValidForSurfaceTolerance(Double)", 2023},
{ "OBJExportOptions.IsSurfaceToleranceSet()", 2023},
{ "OBJExportOptions.IsValidForNormalTolerance(Double)", 2023},
{ "OBJExportOptions.IsNormalToleranceSet()", 2023},
{ "OBJExportOptions.IsValidForMaxEdgeLength(Double)", 2023},
{ "OBJExportOptions.IsMaxEdgeLengthSet()", 2023},
{ "OBJExportOptions.IsValidForGridAspectRatio(Double)", 2023},
{ "OBJExportOptions.IsGridAspectRatioSet()", 2023},
{ "OBJExportOptions.SetTessellationSettings(ExportResolution)", 2023},
{ "OBJExportOptions.get_GridAspectRatio()", 2023},
{ "OBJExportOptions.get_MaxEdgeLength()", 2023},
{ "OBJExportOptions.get_NormalTolerance()", 2023},
{ "OBJExportOptions.get_SurfaceTolerance()", 2023},
{ "OBJExportOptions.get_TargetUnit()", 2023},
{ "STLExportOptions.SetTessellationSettings(ExportResolution)", 2023},
{ "DeleteWorksetSettings.Dispose()", 2023},
{ "DeleteWorksetSettings.get_IsValidObject()", 2023},
{ "DeleteWorksetSettings.get_WorksetId()", 2023},
{ "DeleteWorksetSettings.get_DeleteWorksetOption()", 2023},
{ "WorksetTable.CanDeleteWorkset(Document,WorksetId,DeleteWorksetSettings)", 2023},
{ "WorksetTable.DeleteWorkset(Document,WorksetId,DeleteWorksetSettings)", 2023},
{ "SpatialElementDomainData.Dispose()", 2023},
{ "SpatialElementDomainData.get_IsValidObject()", 2023},
{ "ElectricalLoadAreaData.GetAreaBasedLoadIds()", 2023},
{ "ElectricalLoadAreaData.HasCircuitsWithoutElectricalLoadAreas(Document,ElementId,ElementId)", 2023},
{ "ElectricalLoadAreaData.CreateElectricalLoadAreas(Document,ElementId,ElementId)", 2023},
{ "ElectricalLoadClassification.get_Spare()", 2023},
{ "AreaBasedLoadType.Create(Document,String)", 2023},
{ "AreaBasedLoadType.get_LoadClassification()", 2023},
{ "AreaBasedLoadType.get_LoadDensity()", 2023},
{ "AreaBasedLoadType.get_ApparentPowerDensity()", 2023},
{ "AreaBasedLoadType.get_PowerFactor()", 2023},
{ "EnergyAnalysisOpening.GetPolyloops()", 2023},
{ "EnergyAnalysisSpace.get_Volume()", 2023},
{ "EnergyAnalysisSurface.GetPolyloops()", 2023},
{ "FabricationPart.CanFlipPart()", 2023},
{ "FabricationPart.Flip()", 2023},
{ "FilledRegion.Create(Document,ElementId,SketchPlane,IList`1)", 2023},
{ "InstanceNode.GetSymbolGeometryId()", 2023},
{ "LinkNode.get_SymbolId()", 2023},
{ "LevelAssociationData.GetAssociatedLevel()", 2023},
{ "LevelAssociationData.SetAssociatedLevel(ElementId)", 2023},
{ "LevelAssociationData.GetLevelOffset()", 2023},
{ "LevelAssociationData.GetLevelAssociationData(Element)", 2023},
{ "LevelAssociationData.Dispose()", 2023},
{ "LevelAssociationData.get_IsValidObject()", 2023},
{ "ElectricalAnalyticalNode.Create(Document,ElectricalAnalyticalNodeType,String)", 2023},
{ "ElectricalAnalyticalNode.GetAnalyticalPropertyData()", 2023},
{ "ElectricalAnalyticalNode.GetUpstreamNodeIds()", 2023},
{ "ElectricalAnalyticalNode.ConnectToUpstreamNode(ElementId)", 2023},
{ "ElectricalAnalyticalNode.DisconnectFromUpstreamNode(ElementId)", 2023},
{ "ElectricalAnalyticalNode.GetDownstreamNodeIds()", 2023},
{ "ElectricalAnalyticalNode.CanDisconnectFromUpstreamNode(ElementId)", 2023},
{ "ElectricalAnalyticalNode.CanConnectToUpstreamNode(ElementId)", 2023},
{ "ElectricalAnalyticalNode.get_TotalLoad()", 2023},
{ "ElectricalAnalyticalNode.get_NodeType()", 2023},
{ "PanelScheduleView.SetLockSlot(Int32,Int32,Boolean)", 2023},
{ "ParameterFilterRuleFactory.CreateEqualsRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateNotEqualsRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateGreaterRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateGreaterOrEqualRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateLessRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateLessOrEqualRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateContainsRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateNotContainsRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateBeginsWithRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateNotBeginsWithRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateEndsWithRule(ElementId,String)", 2023},
{ "ParameterFilterRuleFactory.CreateNotEndsWithRule(ElementId,String)", 2023},
{ "AnalyticalEquipmentLoadData.get_LoadType()", 2023},
{ "AnalyticalEquipmentLoadData.get_TrueLoad()", 2023},
{ "AnalyticalEquipmentLoadData.get_PowerFactor()", 2023},
{ "AnalyticalEquipmentLoadData.get_Current()", 2023},
{ "AnalyticalEquipmentLoadData.get_Voltage()", 2023},
{ "AnalyticalEquipmentLoadData.get_ApparentLoad()", 2023},
{ "AnalyticalEquipmentLoadData.get_LoadClassification()", 2023},
{ "RebarShapeDrivenAccessor.FlipRebarSet()", 2023},
{ "RebarCoupler.get_RotationAngle()", 2023},
{ "RebarHostData.IsReferenceContainedByAValidHost(Document,Reference)", 2023},
{ "RebarPropagation.AlignByHost(Document,IList`1,Element)", 2023},
{ "RebarPropagation.AlignByFace(Document,IList`1,Reference,Reference)", 2023},
{ "ScheduleSheetInstance.Create(Document,ElementId,ElementId,XYZ,Int32)", 2023},
{ "ScheduleSheetInstance.get_SegmentIndex()", 2023},
{ "SketchEditScope.StartWithNewSketch(ElementId)", 2023},
{ "SketchEditScope.IsElementWithoutSketch(ElementId)", 2023},
{ "SketchEditScope.IsSketchEditingSupportedForSketchBasedElement(ElementId)", 2023},

};
    }
}