<UserControl x:Class="RevitDBExplorer.UIComponents.List.ListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:localWPF="clr-namespace:RevitDBExplorer.UIComponents.List.WPF"
             xmlns:localVM="clr-namespace:RevitDBExplorer.UIComponents.List.ViewModels"
             xmlns:converters="clr-namespace:RevitDBExplorer.WPF.Converters"    
             xmlns:controls="clr-namespace:RevitDBExplorer.WPF.Controls" 
             xmlns:ap="clr-namespace:RevitDBExplorer.WPF.AttachedProperties" 
             xmlns:dm="clr-namespace:RevitDBExplorer.Domain.DataModel"
             xmlns:wpf="clr-namespace:RevitDBExplorer.WPF"            
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid x:Name="cGrid">
        <Grid.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="../../Resources/Templates/All.xaml"/>
                    <ResourceDictionary Source="../../Resources/VectorGraphic.xaml"/>
                    <ResourceDictionary Source="DataTemplates.xaml"/>
                </ResourceDictionary.MergedDictionaries>
                
                <wpf:BindingProxy x:Key="Proxy" Data="{Binding}" />
                
                <converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
                <converters:PercentageOfValueConverter x:Key="PercentageOfValueConverter"/>
                <converters:EnumMatchToVisibilityConverter x:Key="EnumMatchToVisibilityConverter"/>
                <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" WhenFalse="Collapsed"/>
                <converters:BoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" WhenTrue="Collapsed" WhenFalse="Visible"/>
                <converters:ToResourceWithKeyConverter x:Key="ToResourceWithKeyConverter" FrameworkElement="{Binding ElementName=cGrid}" />
                <localWPF:DataTemplateSelectorForPropertyType x:Key="DataTemplateSelectorForPropertyType"/>
                <localWPF:DynamicGridViewConverter x:Key="DynamicGridViewConverter" FrameworkElement="{Binding ElementName=cGrid}"/>
                

                <ContextMenu x:Key="ContextMenuForNameColumn">
                    <MenuItem Header="Copy" Command="{Binding Data.CopyNameCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Open RevitAPI.chm" InputGestureText="F1" Command="{Binding Data.OpenCHMCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Favourite"  IsCheckable="True" IsChecked="{Binding IsFavourite}" />
                </ContextMenu>
                <ContextMenu x:Key="ContextMenuForValueColumn">
                    <MenuItem Header="Copy" Command="{Binding Data.CopyValueCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}"/>
                </ContextMenu>
                <ContextMenu x:Key="ContextMenuForGroup">
                    <MenuItem Header="Copy" Click="ContextMenuForGroup_Copy_Click" />
                </ContextMenu>

                <ContextMenu x:Key="ContextMenuForParameterNameColumn">
                    <MenuItem Header="Copy" Command="{Binding Data.CopyNameCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Snoop parameter" Command="{Binding Data.SnoopParamInNewWindowCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                </ContextMenu>

                <ContextMenu x:Key="ContextMenuForGenerateCSharpCode">
                    <MenuItem Header="Generate code for a single input" Command="{Binding Data.GenerateCSharpCodeForSingleInputCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                    <MenuItem Header="Generate code for multiple inputs" Command="{Binding Data.GenerateCSharpCodeForMultipleInputsCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding}" />
                </ContextMenu>

                <ToolTip x:Key="ToolTipWithRevitHelp">
                    <StackPanel Orientation="Vertical"  MaxWidth="727">
                        <StackPanel.Resources>
                            <SolidColorBrush x:Key="ToolTip.Key" Color="Gray"/>
                            <SolidColorBrush x:Key="ToolTip.Value" Color="#000000"/>                           
                        </StackPanel.Resources>
                        <TextBlock Visibility="{Binding Documentation.Name, Converter={StaticResource StringToVisibilityConverter}}"
                                   ap:TextBlockAP.BindableInlines="{Binding Documentation.TitleCollored}"
                                   />
                        <TextBlock>
                           
                        </TextBlock>
                        <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Summary, Converter={StaticResource StringToVisibilityConverter}}" >  
                                    <Run Text="{Binding Documentation.Summary, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" /><LineBreak/>
                        </TextBlock>
                        <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Returns, Converter={StaticResource StringToVisibilityConverter}}" >
                                    <Run Text="Returns:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                    <Run Text="{Binding Documentation.Returns, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" /><LineBreak/>
                        </TextBlock>
                        <TextBlock TextWrapping="Wrap" Visibility="{Binding Documentation.Remarks, Converter={StaticResource StringToVisibilityConverter}}">
                                    <Run Text="Remarks:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                    <Run Text="{Binding Documentation.Remarks, Mode=OneWay}"  Foreground="{DynamicResource ToolTip.Value}"/><LineBreak/>
                        </TextBlock>
                        
                    </StackPanel>
                </ToolTip>

                <Style TargetType="{x:Type Grid}" x:Key="sBackgroundGrid" >
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Margin" Value="-6 0 0 0"/>                    
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsFavourite}" Value="true" >
                            <Setter Property="Background" Value="{DynamicResource List.Favourite}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsHighlighted}" Value="true" >
                            <Setter Property="Background" Value="{DynamicResource List.Highlighted}" />
                        </DataTrigger>                       
                    </Style.Triggers>
                </Style>


                <Style x:Key="MiniButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Width" Value="15"/>
                    <Setter Property="Height" Value="15"/>
                    <Setter Property="Padding" Value="1"/>
                    <Setter Property="Margin" Value="2 0 1 0"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                </Style>
                

                <DataTemplate DataType="{x:Type localVM:ListItemForMember}">
                    <Grid 
                          Style="{StaticResource sBackgroundGrid}"
                          ContextMenu="{StaticResource ContextMenuForNameColumn}" 
                          >
                        <StackPanel Orientation="Horizontal"
                                    Margin="5 3 0 3"
                                    ToolTipService.ShowDuration="50000" 
                                    ToolTip="{StaticResource ToolTipWithRevitHelp}">
                            <Path Style="{Binding Icon, Converter={StaticResource ToResourceWithKeyConverter}}" Margin="0 1 4 0"  />
                            <TextBlock Text="{Binding Name, Mode=OneWay}" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"  />
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Resources>
                        
                    </DataTemplate.Resources>
                </DataTemplate>

                <DataTemplate DataType="{x:Type localVM:ListItemForParameter}">
                    <Grid
                          Style="{StaticResource sBackgroundGrid}"
                          ContextMenu="{StaticResource ContextMenuForParameterNameColumn}" 
                          >
                        <StackPanel Orientation="Horizontal"                                
                                Margin="5 3 0 3"
                                >
                            <TextBlock Text="{Binding Name, Mode=OneWay}" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"  />
                        </StackPanel>
                    </Grid>
                </DataTemplate>

                <DataTemplate DataType="{x:Type dm:SnoopableMember}" >
                    <Border Background="Transparent" Margin="0 3 0 3">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            
                            <ContentPresenter
                            ap:ClickOnUp.Command="{Binding Data.ListItem_Click_Command, Source={StaticResource Proxy}}"
                            ContextMenu="{StaticResource ContextMenuForValueColumn}"
                            ContentTemplateSelector="{StaticResource DataTemplateSelectorForPropertyType}"                         
                            HorizontalAlignment="Stretch"                 
                            />
                            <UniformGrid Grid.Column="1" Rows="1" Visibility="{Binding Data.IsComparisonActive, Source={StaticResource Proxy}, Converter={StaticResource InverseBoolToVisibilityConverter}}">

                                <!--<TextBlock Text="V" Foreground="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"  FontWeight="Heavy" FontFamily="Arial" FontSize="10"  Width="8"
                                           Visibility="{Binding CanBeVisualized, Converter={StaticResource BoolToVisibilityConverter}}" VerticalAlignment="Bottom"
                                           ToolTip="item has a visualization"
                                           />-->
                                <Button Style="{StaticResource MiniButton}" Background="Transparent" Padding="0 0 0 0" Visibility="{Binding CanGenerateCode, Converter={StaticResource BoolToVisibilityConverter}}"       
                                     ap:ButtonAP.OpenSubMenuOnClick="True"
                                    ContextMenu="{StaticResource ContextMenuForGenerateCSharpCode}"
                                    ToolTip="RDS: Generate C# code for a given member">
                                    <Path Style="{StaticResource IconQuery}" Width="10"  />
                                </Button>
                            </UniformGrid>
                        </Grid>
                    </Border>
                </DataTemplate>

                <DataTemplate DataType="{x:Type dm:SnoopableParameter}" >
                    <Border Background="Transparent" Margin="0 3 0 3">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                           
                            <ContentPresenter
                                ap:ClickOnUp.Command="{Binding Data.ListItem_Click_Command, Source={StaticResource Proxy}}"
                                ContextMenu="{StaticResource ContextMenuForValueColumn}"
                                ContentTemplateSelector="{StaticResource DataTemplateSelectorForPropertyType}"                         
                                HorizontalAlignment="Stretch"                 
                                />
                            <Button Grid.Column="1" Style="{StaticResource MiniButton}"                                    
                                    Command="{Binding Data.SearchForParameterValueCommand, Source={StaticResource Proxy}}" CommandParameter="{Binding .}"
                                    ToolTip="RDQ: Search Revit database for elements that have a given parameter value" >
                                <Path Style="{StaticResource IconSearch}" Height="14" />
                            </Button>
                            <Grid Grid.Column="2" Visibility="{Binding Data.IsComparisonActive, Source={StaticResource Proxy}, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                                <Button  Style="{StaticResource MiniButton}" Padding="0" Visibility="{Binding CanGenerateCode, Converter={StaticResource BoolToVisibilityConverter}}"       
                                    ap:ButtonAP.OpenSubMenuOnClick="True"
                                    ContextMenu="{StaticResource ContextMenuForGenerateCSharpCode}"
                                    ToolTip="RDS: Generate C# code for a given member">
                                    <Path Style="{StaticResource IconQuery}" Width="10"  />
                                </Button>
                            </Grid>
                        </Grid>
                    </Border>
                </DataTemplate>

            </ResourceDictionary>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid  Margin="0 0 0 3">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <UniformGrid Rows="1" Margin="0 0 4 0" Visibility="{Binding HasParameters, Converter={StaticResource BoolToVisibilityConverter}}">
                <ToggleButton Content="M" BorderBrush="Transparent" IsChecked="{Binding IsMemberViewVisible}" ToolTip="Show members of a given element" />
                <ToggleButton Content="P" BorderBrush="Transparent" IsChecked="{Binding IsParameterViewVisible}" ToolTip="Show parameters of a given element"/>
            </UniformGrid>

            <controls:TextBoxWithPlaceholder Grid.Column="1" Margin="0 0 2 0" Text="{Binding FilterPhrase, Mode=TwoWay, Delay=200, UpdateSourceTrigger=PropertyChanged}" Placeholder="Filter list by name or value"/>

            <Button Grid.Column="2" BorderBrush="Transparent" Margin="2 0 0 0" MinWidth="21" MinHeight="21" Padding="2 0 1 1" ToolTip="Reload data from Revit in the list" Background="Transparent"  Command="{Binding ReloadCommand}">
                <Path Style="{StaticResource IconReload}" Width="18" />
            </Button>
        </Grid>

        <ListView Margin="0 2 0 0" Grid.Row="1"  BorderThickness="0"
                  ItemsSource="{Binding ListItems}"
                  View="{Binding Columns, Converter={StaticResource DynamicGridViewConverter}}"
                  SelectionMode="Single" 
                  SelectedItem="{Binding ListSelectedItem}"
                  AlternationCount="2" 
                  VirtualizingPanel.IsVirtualizing="True"
                  VirtualizingPanel.IsVirtualizingWhenGrouping="False" 
                  VirtualizingPanel.CacheLengthUnit="Page"
                  VirtualizingPanel.CacheLength="7,7" 
                  x:Name="cListView">

            <ListView.InputBindings>
                <KeyBinding Key="Enter" Command="{Binding KeyDown_Enter_Command}"/>
            </ListView.InputBindings>

            <ListView.Resources>
                <ResourceDictionary>
                    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}" >

                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Padding" Value="0 0 0 0"/>

                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="true" >
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true" >
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>


                            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                                <Setter Property="Background" Value="{DynamicResource ListView.Alternation.Background_0}"/>
                            </Trigger>
                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                <Setter Property="Background" Value="{DynamicResource ListView.Alternation.Background_1}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
            </ListView.Resources>

            <ListView.GroupStyle>
                <GroupStyle>
                    <GroupStyle.HeaderTemplate>
                        <DataTemplate>
                            <TextBlock FontWeight="Bold" FontSize="14" Margin="5 0 0 0" Text="{Binding Name, Mode=OneWay}" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" ToolTipService.ShowDuration="50000">
                                <TextBlock.ToolTip>
                                    <ToolTip>
                                        <StackPanel Orientation="Vertical"  MaxWidth="727">
                                            <TextBlock Visibility="{Binding Items[0].DeclaringType.Documentation.Name, Converter={StaticResource StringToVisibilityConverter}}">
                                            <Run Foreground="{DynamicResource ToolTip.Name}" Text="{Binding Items[0].DeclaringType.Documentation.Name, Mode=OneWay}" />
                                            <LineBreak/>
                                            </TextBlock>
                                            <TextBlock TextWrapping="Wrap" Visibility="{Binding Items[0].DeclaringType.Documentation.Summary, Converter={StaticResource StringToVisibilityConverter}}" >  
                                            <Run Text="{Binding Items[0].DeclaringType.Documentation.Summary, Mode=OneWay}" Foreground="{DynamicResource ToolTip.Value}" /><LineBreak/>
                                            </TextBlock>

                                            <TextBlock TextWrapping="Wrap" Visibility="{Binding Items[0].DeclaringType.Documentation.Remarks, Converter={StaticResource StringToVisibilityConverter}}">
                                            <Run Text="Remarks:" Foreground="{DynamicResource ToolTip.Key}"/><LineBreak/>
                                            <Run Text="{Binding Items[0].DeclaringType.Documentation.Remarks, Mode=OneWay}"  Foreground="{DynamicResource ToolTip.Value}"/><LineBreak/>
                                            </TextBlock>
                                        </StackPanel>
                                    </ToolTip>
                                </TextBlock.ToolTip>
                        </TextBlock>
                        </DataTemplate>
                    </GroupStyle.HeaderTemplate>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Margin" Value="2" />
                            <Setter Property="ContextMenu" Value="{StaticResource ContextMenuForGroup}" />
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListView.GroupStyle>

        </ListView>
    </Grid>
</UserControl>